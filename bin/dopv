#!/usr/bin/env ruby

#
# DOPv command line client
#

require 'gli'
require 'dopv'
require 'pry-byebug'

PROGNAME = 'dopv'

module GLIWrapper
  include GLI::App
  extend self

  trace = false

  program_desc 'DOPv command line tool'
  version Dopv::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Log file'
  arg_name 'path_to_log_file'
  default_value 'STDOUT'
  flag [:logfile, :l]

  desc 'Verbosity of the command line tool'
  arg_name 'level'
  default_value 'info'
  flag [:verbosity, :v], :must_match => ['debug', 'info', 'warn', 'error', 'fatal']

  desc 'Show stacktrace on crash'
  switch [:trace, :t]

  pre do |global_options,command,options,args|
    ::Dopv.log(global_options[:logfile] == 'STDOUT' ? STDOUT : global_options[:logfile])
    ::Dopv.log.progname = PROGNAME
    ::Dopv.log.level = ::Logger.const_get(global_options[:verbosity].upcase)
    trace = global_options[:trace]

    true
  end

  on_error do |exception|
    ::Dopv::log.fatal {"#{exception.message}"}
    STDERR.puts "\n#{exception.backtrace.join("\n")}" if trace

    true
  end

  desc 'Deploy a plan'
  command :deploy do |c|
    c.flag [:plan, :p], :arg_name => 'path_to_plan_file', :required => true
    c.flag [:diskdb, :d], :arg_name => 'path_to_db_file'
    c.action do |global_options,options,args|
      plan = ::Dopv::load_plan(options[:plan])
      data_volumes_db = ::Dopv::load_data_volumes_db(options[:diskdb])
      ::Dopv::run_plan(plan, data_volumes_db, :deploy)
    end
  end

  desc 'Undeploy a plan'
  command :undeploy do |c|
    c.flag [:plan, :p], :arg_name => 'path_to_plan_file', :required => true
    c.flag [:diskdb, :d], :arg_name => 'path_to_db_file'
    c.switch [:rmdisk, :r]
    c.action do |global_options,options,args|
      plan = ::Dopv::load_plan(options[:plan])
      data_volumes_db = ::Dopv::load_data_volumes_db(options[:diskdb])
      ::Dopv::run_plan(plan, data_volumes_db, :undeploy, options[:rmdisk])
    end
  end

  desc 'Validate plan file'
  command :validate do |c|
    c.flag [:plan, :p], :arg_name => 'path_to_plan_file', :required => true
    c.action do |global_options,options,args|
      ::Dopv::plan_valid?(options[:plan]) ? puts('Plan valid.') : puts('Plan is NOT valid!')
    end
  end

  exit run(ARGV)
end
